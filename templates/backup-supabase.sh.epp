#!/bin/bash

# Supabase Backup Script
# This script creates a complete backup of the Supabase database and configuration

set -euo pipefail

# Configuration
DOCKER_DIR="<%= $docker_dir %>"
BACKUP_DIR="<%= $backup_dir %>"
RETENTION_DAYS="<%= $retention_days %>"
POSTGRES_PASSWORD="<%= $postgres_password %>"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="supabase_backup_${TIMESTAMP}"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "${BACKUP_DIR}/backup.log"
}

# Check if Docker is running
if ! docker info >/dev/null 2>&1; then
    log "ERROR: Docker is not running"
    exit 1
fi

# Ensure backup directory exists
mkdir -p "${BACKUP_DIR}"

log "Starting Supabase backup: ${BACKUP_NAME}"

# Change to Docker directory
cd "${DOCKER_DIR}"

# Check if Supabase is running
if ! docker-compose ps | grep -q "Up"; then
    log "WARNING: Some Supabase services may not be running"
fi

# Create backup subdirectory
BACKUP_PATH="${BACKUP_DIR}/${BACKUP_NAME}"
mkdir -p "${BACKUP_PATH}"

# Backup database
log "Backing up PostgreSQL database..."
if docker-compose exec -T db pg_dumpall -U postgres > "${BACKUP_PATH}/database.sql"; then
    log "Database backup completed successfully"
    gzip "${BACKUP_PATH}/database.sql"
    log "Database backup compressed"
else
    log "ERROR: Database backup failed"
    exit 1
fi

# Backup configuration files
log "Backing up configuration files..."
cp "${DOCKER_DIR}/.env" "${BACKUP_PATH}/supabase.env" 2>/dev/null || log "WARNING: Could not backup .env file"
cp "${DOCKER_DIR}/docker-compose.yml" "${BACKUP_PATH}/" 2>/dev/null || log "WARNING: Could not backup docker-compose.yml"
cp "${DOCKER_DIR}/docker-compose.prod.yml" "${BACKUP_PATH}/" 2>/dev/null || log "WARNING: Could not backup docker-compose.prod.yml"

# Backup storage data (if using file storage)
if grep -q "STORAGE_BACKEND=file" "${DOCKER_DIR}/.env" 2>/dev/null; then
    log "Backing up storage files..."
    if [ -d "/opt/supabase/volumes/storage" ]; then
        tar -czf "${BACKUP_PATH}/storage_data.tar.gz" -C "/opt/supabase/volumes" storage/
        log "Storage files backup completed"
    else
        log "WARNING: Storage directory not found"
    fi
fi

# Backup function files
log "Backing up Edge Functions..."
if [ -d "/opt/supabase/volumes/functions" ]; then
    tar -czf "${BACKUP_PATH}/functions.tar.gz" -C "/opt/supabase/volumes" functions/
    log "Functions backup completed"
else
    log "WARNING: Functions directory not found"
fi

# Create backup metadata
cat > "${BACKUP_PATH}/backup_info.txt" << EOF
Backup Information
==================
Backup Name: ${BACKUP_NAME}
Backup Date: $(date)
Supabase Version: $(git -C /opt/supabase/supabase rev-parse --short HEAD 2>/dev/null || echo "unknown")
Docker Compose Version: $(docker-compose --version)
Server: $(hostname)
Backup Size: $(du -sh "${BACKUP_PATH}" | cut -f1)

Services Status at Backup Time:
$(docker-compose ps 2>/dev/null || echo "Could not get service status")
EOF

# Create checksum file
log "Creating checksums..."
cd "${BACKUP_PATH}"
find . -type f -exec sha256sum {} \; > checksums.sha256

# Calculate total backup size
BACKUP_SIZE=$(du -sh "${BACKUP_PATH}" | cut -f1)
log "Backup completed successfully. Size: ${BACKUP_SIZE}"

# Create symlink to latest backup
cd "${BACKUP_DIR}"
rm -f latest
ln -s "${BACKUP_NAME}" latest

log "Backup process completed: ${BACKUP_PATH}"

# Clean up old backups (keep logs)
if [ "${RETENTION_DAYS}" -gt 0 ]; then
    log "Cleaning up backups older than ${RETENTION_DAYS} days..."
    find "${BACKUP_DIR}" -maxdepth 1 -type d -name "supabase_backup_*" -mtime +${RETENTION_DAYS} -exec rm -rf {} \; 2>/dev/null || true
fi

# Test backup integrity
log "Testing backup integrity..."
if gzip -t "${BACKUP_PATH}/database.sql.gz" 2>/dev/null; then
    log "Database backup integrity check passed"
else
    log "WARNING: Database backup may be corrupted"
fi

log "Backup script completed successfully"
exit 0 