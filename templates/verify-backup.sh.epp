#!/bin/bash

# Supabase Backup Verification Script
# Verifies the integrity and validity of backup files

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

error() {
    echo -e "${RED}‚úó${NC} $1"
}

BACKUP_DIR="<%= $backup_dir %>"

# Usage function
usage() {
    echo ""
    echo "Usage: $0 [backup_file|--all]"
    echo ""
    echo "Options:"
    echo "  --all           Verify all backup files in $BACKUP_DIR"
    echo "  backup_file     Verify a specific backup file"
    echo ""
    echo "Examples:"
    echo "  $0 --all"
    echo "  $0 supabase_backup_2024-01-15_02-00-01.sql.gz"
    echo "  $0 /path/to/custom/backup.sql"
    echo ""
}

# Check if running as supabase user
if [ "$(whoami)" != "supabase" ]; then
    error "This script must be run as the supabase user"
    echo "Run: sudo -u supabase $0 [options]"
    exit 1
fi

# Verify a single backup file
verify_backup_file() {
    local file="$1"
    local filename=$(basename "$file")
    local errors=0
    
    echo ""
    echo "========================================="
    echo "Verifying: $filename"
    echo "========================================="
    
    # Check if file exists
    if [ ! -f "$file" ]; then
        error "File does not exist: $file"
        return 1
    fi
    
    # Check file size
    local size=$(stat -c%s "$file")
    local size_mb=$((size / 1024 / 1024))
    
    if [ "$size" -eq 0 ]; then
        error "File is empty"
        ((errors++))
    elif [ "$size_mb" -lt 1 ]; then
        warning "File is very small (${size} bytes) - may be incomplete"
    else
        success "File size: ${size_mb}MB ($(numfmt --to=iec "$size"))"
    fi
    
    # Check file permissions
    if [ -r "$file" ]; then
        success "File is readable"
    else
        error "File is not readable"
        ((errors++))
    fi
    
    # Check file age
    local age_days=$(( ($(date +%s) - $(stat -c%Y "$file")) / 86400 ))
    if [ "$age_days" -eq 0 ]; then
        log "File age: Today"
    elif [ "$age_days" -eq 1 ]; then
        log "File age: 1 day"
    else
        log "File age: $age_days days"
    fi
    
    # Verify file integrity based on type
    if [[ "$file" == *.gz ]]; then
        log "Testing gzip integrity..."
        if gzip -t "$file" 2>/dev/null; then
            success "Gzip integrity check passed"
            
            # Test SQL content (first few lines)
            log "Checking SQL content..."
            local sql_lines=$(gunzip -c "$file" | head -20 | grep -E "^(--|CREATE|INSERT|DROP|ALTER|COPY)" | wc -l)
            if [ "$sql_lines" -gt 0 ]; then
                success "SQL content detected ($sql_lines SQL statements in first 20 lines)"
            else
                warning "No recognizable SQL statements found in file header"
                ((errors++))
            fi
            
            # Check for PostgreSQL dump header
            if gunzip -c "$file" | head -5 | grep -q "PostgreSQL database dump"; then
                success "Valid PostgreSQL dump format detected"
            else
                warning "PostgreSQL dump header not found"
            fi
            
        else
            error "Gzip integrity check failed - file may be corrupted"
            ((errors++))
        fi
    else
        # Uncompressed SQL file
        log "Checking SQL file content..."
        if head -20 "$file" | grep -qE "^(--|CREATE|INSERT|DROP|ALTER|COPY)"; then
            success "SQL content detected"
        else
            warning "No recognizable SQL statements found"
            ((errors++))
        fi
        
        # Check for PostgreSQL dump header
        if head -5 "$file" | grep -q "PostgreSQL database dump"; then
            success "Valid PostgreSQL dump format detected"
        else
            warning "PostgreSQL dump header not found"
        fi
    fi
    
    # Summary for this file
    echo ""
    if [ "$errors" -eq 0 ]; then
        success "Verification completed: $filename is valid"
    else
        error "Verification completed: $filename has $errors issue(s)"
    fi
    
    return $errors
}

# Main verification logic
main() {
    echo "========================================"
    echo -e "${BLUE}üîç Supabase Backup Verification${NC}"
    echo "========================================"
    echo ""
    
    # Check if backup directory exists
    if [ ! -d "$BACKUP_DIR" ]; then
        error "Backup directory does not exist: $BACKUP_DIR"
        exit 1
    fi
    
    log "Backup directory: $BACKUP_DIR"
    
    if [ $# -eq 0 ]; then
        usage
        exit 1
    fi
    
    local total_files=0
    local valid_files=0
    local failed_files=0
    
    if [ "$1" = "--all" ]; then
        # Verify all backup files
        log "Verifying all backup files..."
        
        local backup_files=$(find "$BACKUP_DIR" -name "*.sql.gz" -o -name "*.sql" | sort)
        
        if [ -z "$backup_files" ]; then
            warning "No backup files found in $BACKUP_DIR"
            exit 0
        fi
        
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                ((total_files++))
                if verify_backup_file "$file"; then
                    ((valid_files++))
                else
                    ((failed_files++))
                fi
            fi
        done <<< "$backup_files"
        
    else
        # Verify single file
        local file="$1"
        
        # Resolve file path
        if [ ! -f "$file" ]; then
            if [ -f "$BACKUP_DIR/$file" ]; then
                file="$BACKUP_DIR/$file"
            else
                error "Backup file not found: $file"
                echo ""
                echo "Available backups:"
                find "$BACKUP_DIR" -name "*.sql.gz" -o -name "*.sql" -exec basename {} \; | sort -r | head -10
                exit 1
            fi
        fi
        
        total_files=1
        if verify_backup_file "$file"; then
            valid_files=1
        else
            failed_files=1
        fi
    fi
    
    # Overall summary
    echo ""
    echo "========================================="
    echo "Overall Verification Summary"
    echo "========================================="
    echo "Total files checked: $total_files"
    echo "Valid files: $valid_files"
    echo "Failed files: $failed_files"
    echo ""
    
    if [ "$failed_files" -eq 0 ]; then
        success "All backup files are valid!"
        echo ""
        echo "üí° Tips:"
        echo "  ‚Ä¢ Test restore: sudo -u supabase /opt/supabase/restore-supabase.sh <backup_file>"
        echo "  ‚Ä¢ Clean old backups: sudo -u supabase /opt/supabase/cleanup-backups.sh"
        echo "  ‚Ä¢ Create new backup: sudo -u supabase /opt/supabase/backup-supabase.sh"
    else
        error "$failed_files backup file(s) have issues"
        echo ""
        echo "üí° Recommendations:"
        echo "  ‚Ä¢ Remove corrupted files and create new backups"
        echo "  ‚Ä¢ Check disk space and file system integrity"
        echo "  ‚Ä¢ Verify backup process is working correctly"
        exit 1
    fi
}

# Run main function with all arguments
main "$@" 