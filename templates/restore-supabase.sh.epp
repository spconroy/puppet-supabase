#!/bin/bash

# Supabase Database Restore Script
# Restores the Supabase database from a backup file

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

error() {
    echo -e "${RED}‚úó${NC} $1"
}

DOCKER_DIR="<%= $docker_dir %>"
BACKUP_DIR="<%= $backup_dir %>"
POSTGRES_PASSWORD="<%= $postgres_password %>"

# Usage function
usage() {
    echo ""
    echo "Usage: $0 <backup_file>"
    echo ""
    echo "Examples:"
    echo "  $0 supabase_backup_2024-01-15_02-00-01.sql.gz"
    echo "  $0 /path/to/custom/backup.sql"
    echo ""
    echo "Available backups in $BACKUP_DIR:"
    if [ -d "$BACKUP_DIR" ]; then
        find "$BACKUP_DIR" -name "*.sql.gz" -type f -exec basename {} \; | sort -r | head -10
    else
        echo "  No backup directory found"
    fi
    echo ""
}

# Check if running as supabase user
if [ "$(whoami)" != "supabase" ]; then
    error "This script must be run as the supabase user"
    echo "Run: sudo -u supabase $0 <backup_file>"
    exit 1
fi

# Check arguments
if [ $# -ne 1 ]; then
    error "Please provide a backup file to restore"
    usage
    exit 1
fi

BACKUP_FILE="$1"

# Resolve backup file path
if [ ! -f "$BACKUP_FILE" ]; then
    # Try looking in backup directory
    if [ -f "$BACKUP_DIR/$BACKUP_FILE" ]; then
        BACKUP_FILE="$BACKUP_DIR/$BACKUP_FILE"
    else
        error "Backup file not found: $BACKUP_FILE"
        usage
        exit 1
    fi
fi

echo "========================================"
echo -e "${RED}‚ö†Ô∏è  SUPABASE DATABASE RESTORE${NC}"
echo "========================================"
echo ""
warning "This will COMPLETELY REPLACE your current database!"
warning "All existing data will be permanently lost!"
echo ""
echo "Backup file: $BACKUP_FILE"
echo "Backup size: $(du -h "$BACKUP_FILE" | cut -f1)"
echo "Created: $(stat -c %y "$BACKUP_FILE" 2>/dev/null || echo "Unknown")"
echo ""

# Confirmation prompt
read -p "Are you absolutely sure you want to continue? Type 'YES' to proceed: " confirm
if [ "$confirm" != "YES" ]; then
    warning "Restore cancelled by user"
    exit 0
fi

echo ""
log "Starting database restore process..."

# Step 1: Stop Supabase services
log "Stopping Supabase services..."
cd "$DOCKER_DIR"
if docker-compose down; then
    success "Services stopped"
else
    error "Failed to stop services"
    exit 1
fi

# Step 2: Start only PostgreSQL for restoration
log "Starting PostgreSQL container for restore..."
if docker-compose up -d db; then
    success "PostgreSQL container started"
else
    error "Failed to start PostgreSQL container"
    exit 1
fi

# Wait for PostgreSQL to be ready
log "Waiting for PostgreSQL to be ready..."
for i in {1..30}; do
    if docker-compose exec -T db pg_isready -U postgres >/dev/null 2>&1; then
        success "PostgreSQL is ready"
        break
    fi
    
    if [ $i -eq 30 ]; then
        error "PostgreSQL failed to start within 30 seconds"
        exit 1
    fi
    
    sleep 1
done

# Step 3: Drop and recreate the database
log "Recreating database..."
docker-compose exec -T db psql -U postgres -c "DROP DATABASE IF EXISTS postgres;" || true
docker-compose exec -T db psql -U postgres -c "CREATE DATABASE postgres;"

if [ $? -ne 0 ]; then
    error "Failed to recreate database"
    exit 1
fi

success "Database recreated"

# Step 4: Restore the backup
log "Restoring backup data..."

if [[ "$BACKUP_FILE" == *.gz ]]; then
    # Compressed backup
    if gunzip -c "$BACKUP_FILE" | docker-compose exec -T db psql -U postgres -d postgres; then
        success "Compressed backup restored successfully"
    else
        error "Failed to restore compressed backup"
        exit 1
    fi
else
    # Uncompressed backup
    if cat "$BACKUP_FILE" | docker-compose exec -T db psql -U postgres -d postgres; then
        success "Backup restored successfully"
    else
        error "Failed to restore backup"
        exit 1
    fi
fi

# Step 5: Stop PostgreSQL container
log "Stopping PostgreSQL container..."
docker-compose down

# Step 6: Start all services
log "Starting all Supabase services..."
if systemctl start supabase; then
    success "Services started"
else
    error "Failed to start services"
    exit 1
fi

# Step 7: Wait for services to be ready
log "Waiting for services to be ready..."
sleep 45

# Step 8: Health check
log "Performing health check..."
if "${DOCKER_DIR}/../health-check.sh" --quiet 2>/dev/null; then
    success "Health check passed"
else
    warning "Health check failed - services may still be starting"
    echo "Check manually with: systemctl status supabase"
fi

echo ""
echo "========================================"
echo -e "${GREEN}üéâ Database Restore Complete!${NC}"
echo "========================================"
echo ""
echo "üìä Your Supabase instance has been restored from:"
echo "   $BACKUP_FILE"
echo ""
echo "üîß Next steps:"
echo "   ‚Ä¢ Verify your data at: http://$(hostname -I | awk '{print $1}'):8000"
echo "   ‚Ä¢ Check service status: systemctl status supabase"
echo "   ‚Ä¢ View logs: journalctl -u supabase -f"
echo ""
echo "‚ö†Ô∏è  Important notes:"
echo "   ‚Ä¢ All user sessions have been invalidated"
echo "   ‚Ä¢ You may need to recreate any API keys or configuration"
echo "   ‚Ä¢ Consider creating a new backup after verifying the restore"
echo ""

success "Restore process completed successfully!" 